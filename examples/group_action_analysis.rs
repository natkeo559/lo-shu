#![allow(incomplete_features)]
#![feature(generic_const_exprs)]

use lo_shu::{CheckVector, Group, OrderFour, Permutation};
use std::collections::HashSet;


fn main() {
    let mut total = HashSet::new();

        let mut f = vec![
            80867885530,
            80907762010,
            87135145594,
            161736137050,
            161815890602,
            161899312682,
            161899301314,
            173634649702,
            173794197846,
            173834051590,
            173834074326,
            242607613576,
            242767161720,
            242850561064,
            242850583800,
            248598575944,
            248598598680,
            248392606810,
            248591691154,
            254825228830,
            254825251566,
            242610879503,
            242770427647,
            242810281391,
            242810304127,
            254785684054,
            254785706790,
            254619990394,
            254815124194,
            260573247934,
            260573270670,
            248558300495,
            248558323231,
            260533698934,
            260533721670,
            323632146010,
            323755445162,
            323795321642,
            323795310274,
            347029947190,
            347109735430,
            347109758166,
            347272923030,
            404503622536,
            404706716280,
            404746570024,
            404746592760,
            410494584904,
            410494607640,
            404623685314,
            404663561794,
            410411914922,
            410487711482,
            404513409527,
            404712817175,
            404712839911,
            404473543823,
            404633069231,
            404633091967,
            428216631070,
            428216653806,
            410381088335,
            410381111071,
            433964650174,
            433964672910,
            428105155414,
            428105178150,
            433853170294,
            433853193030,
            485454887176,
            485657963944,
            485657986680,
            485697863160,
            497190286024,
            497190308760,
            485691319234,
            485571700570,
            485651454122,
            485691330602,
            485461414007,
            485704389991,
            508972721614,
            508972744350,
            509164635550,
            509164658286,
            485581073711,
            485581096447,
            508892938390,
            508928576950,
            509016549334,
            509016572070,
            509048241670,
            520505066430,
            520624385854,
            520624408590,
            497040824015,
            497040846751,
            520548871414,
            520548894150,
            520628359830,
            572317722360,
            572353665064,
            578066064120,
            578101679944,
            583814079000,
            583850044440,
            589724871646,
            590039418910,
            590076029470,
            566409423503,
            566612500271,
            595624243486,
            595787438014,
            595824393966,
            589964576550,
            590001187110,
            590119166854,
            572400023015,
            572081283983,
            572240832127,
            572276774831,
            601260459646,
            601332708766,
            601535779774,
            601572413070,
            595512439750,
            595712250454,
            595749201990,
            577988851231,
            578024471471,
            601460265334,
            601496898630,
            583616865431,
            583652830871,
            583736525135,
            583772490575,
            653594252301,
            653793654189,
            694179553484,
            694179559100,
            694542529052,
            694311040982,
            694502651972,
            734735552040,
            734775428520,
            734768521834,
            734648903170,
            734728656722,
            734768533202,
            734658661807,
            734545511925,
            734545523293,
            734665171629,
            734781955351,
            734744925181,
            740516536714,
            740516548082,
            740210845581,
            740293542397,
            740293531029,
            740529584613,
            775094898044,
            775167147164,
            775262300732,
            775449971132,
            775481998092,
            775262312100,
            775179292502,
            775374456692,
            775478725838,
            775481986724,
            781010315612,
            781010326980,
            781230017196,
            781230005828,
            815600167810,
            815679915754,
            815679927122,
            815719803602,
            815736475261,
            826953278077,
            827212249202,
            826953266709,
            827212237834,
            856207049942,
            856173706020,
            856426735934,
            856173694652,
            856429991204,
            856430002572,
            867706028100,
            867889741508,
            867706016732,
            867889752876,
            896634826320,
            896674702800,
            896521325527,
            896684489791,
            902339662802,
            902375616874,
            902346558120,
            902422354680,
            902153263453,
            902189217525,
            908088004562,
            908123631754,
            907901282557,
            907936914165,
            913836019442,
            913871984882,
            913768627533,
            913804592973,
            913648967829,
            913684933269,
            936957884228,
            937002039428,
            937109242580,
            937121710500,
            937158321060,
            937277324372,
            937304774564,
            937341385124,
            937352185052,
            937384522508,
            937388795612,
            942906335940,
            943052793668,
            942789607532,
            942869395772,
            943012886924,
            943089738252,
            948537627428,
            948654032580,
            948801135428,
            948844962548,
            948493799708,
            948602010044,
            948617410652,
            948721352204,
            948733486892,
            948837757356,
            977542585090,
            977582461570,
            977542590842,
            977622338042,
            977392796301,
            977595873069,
            977392802053,
            977635749541,
            1000708244443,
            1000751381827,
            1000751387443,
            1001082602072,
            1001082607688,
            1001102539651,
            1024552663118,
            1024552668734,
            1024136175426,
            1024136181042,
            1024180330626,
            1024223468010,
            1024223473626,
            1024287533778,
            1024455615570,
            1024530476250,
            1024562813706,
            1041013318028,
            1041101013900,
            1041101008148,
            1041248771708,
            1041248777460,
            1041256673588,
            1058497490040,
            1058577237240,
            1058420599807,
            1058583764071,
            1064238286210,
            1064202326522,
            1064331415951,
            1064088497421,
            1064052537733,
            1064132331607,
            1081925667152,
            1081993995992,
            1082037823112,
            1081699391923,
            1081778851987,
            1081814490547,
            1081934155267,
            1081810867579,
            1081858635211,
            1087673682032,
            1087742343368,
            1087447082947,
            1087646893651,
            1087558886683,
            1087722081211,
            1105507567932,
            1105287881940,
            1105171478106,
            1105284252542,
            1105394429418,
            1105464057038,
            1111182355266,
            1110919169130,
            1110998957370,
            1111032267422,
            1111142448522,
            1111212404414,
            1121928662588,
            1122000911708,
            1122049018380,
            1122120253868,
            1122160165628,
            1122203992748,
            1121972490308,
            1122012402068,
            1122128478308,
            1122196781940,
            1139452020607,
            1139491897087,
            1151340700208,
            1151412949328,
            1151506119391,
            1151190911419,
            1151263160539,
            1151310985591,
            1162837061072,
            1162945271408,
            1162650661723,
            1162758872059,
            1174369383152,
            1174441632272,
            1174346178931,
            1174146373243,
            1174218622363,
            1174421693371,
            1186122747906,
            1186357829490,
            1186462098636,
            1186162665300,
            1186078270842,
            1186150519962,
            1186342433898,
            1186433343930,
            1186415332454,
            1186195646462,
            1197618459426,
            1197881967426,
            1197925794546,
            1197574631706,
            1197682842042,
            1197698242650,
            1197802184202,
            1197814318890,
            1197911693318,
            1197727968542,
            1209150781506,
            1209190693266,
            1209306769506,
            1209106953786,
            1209179202906,
            1209298545066,
            1209371443622,
            1209338456826,
            1209382283946,
            1209223680062,
            1209298545066,
            1209306769506,
            1209338456826,
            1209371443622,
            1209382283946,
            1226626724047,
            1232368170368,
            1232408046848,
            1232218381579,
            1232421458347,
            1238036401328,
            1238072685008,
            1237886612539,
            1237922896219,
            1243780792448,
            1243940690792,
            1243717676467,
            1243797464707,
            1249532762192,
            1249605007088,
            1249346362843,
            1249418607739,
            1255276826432,
            1255280777072,
            1255353026192,
            1255396853312,
            1255094377723,
            1255166626843,
            1267062201162,
            1267370231652,
            1267058940258,
            1267385299650,
            1267421910210,
            1273002169578,
            1273075068134,
            1272818449026,
            1272891347582,
            1278750188682,
            1278823087238,
            1278566463906,
            1278639362462,
            1290090884106,
            1290246549546,
            1290282837542,
            1290098785986,
            1290334239666,
            1290135073982,
            1388622042490,
            1394726132530,
            1394849426074,
            1463176629850,
            1463343745498,
            1463346637768,
            1463346660504,
            1463306353871,
            1463306376607,
            1468811833696,
            1468971381840,
            1469094652648,
            1469094675384,
            1468854965327,
            1468815099623,
            1468974625031,
            1468974647767,
            1469054372975,
            1469054395711,
            1475281760758,
            1475281783494,
            1475321301310,
            1475321324046,
            1481029775638,
            1481029798374,
            1480900696954,
            1481055954874,
            1481069320414,
            1481069343150,
            1550006005439,
            1550006028175,
            1550045550215,
            1550045572951,
            1561658391142,
            1561817939286,
            1562020952878,
            1562020975614,
            1625239765826,
            1625195937962,
            1625242646728,
            1625242669464,
            1630707842656,
            1630864521154,
            1625129141711,
            1625129164447,
            1630944268354,
            1630910936400,
            1630990661608,
            1630990684344,
            1630717629647,
            1630877160815,
            1630877183551,
            1630917060031,
            1630957298575,
            1630996843351,
            1648601232118,
            1648601254854,
            1648712703550,
            1648712726286,
            1654106303926,
            1654217775166,
            1654349246998,
            1654349269734,
            1654380974710,
            1654457461150,
            // 1654460722654,
            // 1654460745390,
            // 1735133441590,
            // 1735213229830,
            // 1735213252566,
            // 1735416288894,
        ];

        f.sort();

        let mut exclude = HashSet::new();
        let mut ops = HashSet::new();
        let mut sols = vec![];
        let mut taken = vec![];
        for i in f.clone() {
            for j in f.clone() {
                if i != j {
                    let mut s = HashSet::new();
                    s.insert(i);
                    s.insert(j);
                    if !taken.contains(&s) {
                        taken.push(s);
                        let a = Permutation::<OrderFour>::kth(i);
                        let c = Permutation::<OrderFour>::kth(j);
                        let b = (c.inv() * a).inv();
                        ops.insert(b);
                        for i in b.generate_d_indexes() {
                            if sols.contains(&i) {
                                if i != b.index && !exclude.contains(&i) {
                                    exclude.insert(i);
                                }
                            }
                        }
                        if !exclude.contains(&b.index) && !sols.contains(&b.index) {
                            sols.push(b.index)
                        }
                    }
                }
            }
        }

        let mut count = 0;
        let mut valid = vec![];
        for i in f.clone() {
            count += 1;
            if total.len() == 7040 {
                println!("STOP {}",  count);
                break;
            }
            for j in sols.clone().into_iter() {
                let a = Permutation::<OrderFour>::kth(i);
                let b = Permutation::<OrderFour>::kth(j);

                for x in a.generate_d() {
                    total.insert(x.index);
                    
                    if let Some(d) = unsafe { (x * b).check_v_unsafe() } {
                        if !valid.contains(&b) {
                            valid.push(b);
                        }
                        for p in d.generate_d_indexes() {
                            total.insert(p);
                            
                        }
                    }
                }
            }
        }

        println!("{:?}", total.len());
        println!("{:?}", valid.len());

        // for l in valid {
        //     println!("{:?}", l.cyclic_notation().k);
        //     println!("{}", l);
        // }
}